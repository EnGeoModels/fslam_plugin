# -*- coding: utf-8 -*-
"""
/***************************************************************************
 fslam
                                 A QGIS plugin
 fslam
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Zizheng Guo
        email                : cuggzz@cug.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import csv
import os
import inspect
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.gui import QgsMapLayerComboBox
from qgis.core import (QgsProject,
                       QgsMapLayerProxyModel,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFile,
                       QgsMessageLog,
                       QgsLayerTreeLayer,
                       QgsLayerTreeGroup)
import subprocess

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .fslam_dialog import fslamDialog
import os.path, os
from shutil import copy


class fslam:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'fslam_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FSLAM')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('fslam', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/fslam/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'FSLAM'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FSLAM'),
                action)
            self.iface.removeToolBarIcon(action)

    def getLayers(self):
        layers = QgsProject.instance().layerTreeRoot().children()
        projectLayers = [layer for layer in layers if (isinstance(
            layer, QgsLayerTreeLayer) and layer.layer().type() == 0) and layer.layer().geometryType() == 2]
        try:
            groupedLayers = [layer.findLayers() for layer in layers if (
                isinstance(layer, QgsLayerTreeGroup))]
            projectLayers.extend([layer for layer in groupedLayers[0] if (
                    isinstance(layer,
                               QgsLayerTreeLayer) and layer.layer().type() == 0) and layer.layer().geometryType() == 2])
        except:
            pass
        return projectLayers

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = fslamDialog()
            
            # Connect button action to function
            self.dlg.toolButton_dem_layer.clicked.connect(self.OpenBrowse_1)
            self.dlg.toolButton_soil_layer.clicked.connect(self.OpenBrowse_2)
            self.dlg.toolButton_lulc_layer.clicked.connect(self.OpenBrowse_3)
            self.dlg.toolButton_rain_ant.clicked.connect(self.OpenBrowse_4)
            self.dlg.toolButton_rain_event.clicked.connect(self.OpenBrowse_5)
            self.dlg.toolButton_soil_csv.clicked.connect(self.OpenBrowse_7)
            self.dlg.toolButton_hmtu_csv.clicked.connect(self.OpenBrowse_8)
            # Action for results folder
            self.dlg.toolButton_result_output.clicked.connect(self.SelectResultsFolder)
            
            # Run button action
            self.dlg.toolButton_run.clicked.connect(self.LaunchModel)
            
            # Close form
            self.dlg.toolButton_close.clicked.connect(self.CloseWindow)

        # Fetch the currently loaded layers
        layers = self.getLayers()
        
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox_dem_layer.clear()
        self.dlg.comboBox_soil_layer.clear()
        self.dlg.comboBox_lulc_layer.clear()
        self.dlg.comboBox_rain_ant.clear()
        self.dlg.comboBox_rain_event.clear()
        self.dlg.comboBox_soil_csv.clear()
        self.dlg.comboBox_hmtu_csv.clear()
        
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox_dem_layer.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_soil_layer.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_lulc_layer.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_rain_ant.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_rain_event.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_soil_csv.addItems([layer.layer().source() for layer in layers])
        self.dlg.comboBox_hmtu_csv.addItems([layer.layer().source() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    # Method to open browser in button 1
    def OpenBrowse_1(self):        
    
        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select DEM raster file', 'c:\\',"ASCII raster (*.asc *.txt)")
        
        # Add selected file to combo
        self.dlg.comboBox_dem_layer.addItem(filename1[0])

    def OpenBrowse_2(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select soil raster file', 'c:\\',"ASCII raster (*.asc *.txt)")

        # Add selected file to combo
        self.dlg.comboBox_soil_layer.addItem(filename1[0])

    def OpenBrowse_3(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select land use and land cover raster file', 'c:\\',"ASCII raster (*.asc *.txt)")

        # Add selected file to combo
        self.dlg.comboBox_lulc_layer.addItem(filename1[0])

    def OpenBrowse_4(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select antecedent rainfall raster file', 'c:\\',"ASCII raster (*.asc *.txt)")

        # Add selected file to combo
        self.dlg.comboBox_rain_ant.addItem(filename1[0])

    def OpenBrowse_5(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select event rainfall raster file', 'c:\\',"ASCII raster (*.asc *.txt)")

        # Add selected file to combo
        self.dlg.comboBox_rain_event.addItem(filename1[0])

    def OpenBrowse_7(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select soil data file', 'c:\\',"ASCII (*.csv)")

        # Add selected file to combo
        self.dlg.comboBox_soil_csv.addItem(filename1[0])

    def OpenBrowse_8(self):

        # Open browsing dialog
        filename1 = QFileDialog.getOpenFileName(self.dlg, 'Select hmtu data file', 'c:\\', "ASCII (*.csv)")

        # Add selected file to combo
        self.dlg.comboBox_hmtu_csv.addItem(filename1[0])
        
    def SelectResultsFolder(self):
    
        # Open browsing dialog
        filename1 = QFileDialog.getExistingDirectory(self.dlg, 'Select directory')
        
        # Add selected file to combo
        self.dlg.lineEdit.setText(filename1)
    
    def CloseWindow(self):
    
        # Close dialog
        self.dlg.close()
    
    def LaunchModel(self):

        #=========================================
        # Create filenames.txt into results folder
        #=========================================
        
        # Open the filenames.txt to write
        f = open(os.path.join(self.dlg.lineEdit.text(), 'filenames.txt'), "w")

        # Write the filenames
        f.write(self.dlg.lineEdit.text() + '/input.dat\n')        
        f.write(self.dlg.comboBox_dem_layer.currentText() + '\n')
        f.write(self.dlg.comboBox_rain_ant.currentText() + '\n')
        f.write(self.dlg.comboBox_rain_event.currentText() + '\n')        
        f.write(self.dlg.comboBox_soil_layer.currentText() + '\n')
        f.write(self.dlg.comboBox_soil_csv.currentText() + '\n')        
        f.write(self.dlg.comboBox_lulc_layer.currentText() + '\n')
        f.write(self.dlg.comboBox_hmtu_csv.currentText() + '\n')
        f.write(self.dlg.lineEdit.text())
        
        # Close the file
        f.close()
        

        #========================================        
        #Create the input.dat into results folder
        #=========================================
        
        # Open the input.dat to write
        f = open(os.path.join(self.dlg.lineEdit.text(), 'input.dat'), "w")

        # Write the output checkboxes
        if self.dlg.checkBox_GIS_result.isChecked() == True:
            f.write('1				!iOutput, create GIS results\n')
        else:
            f.write('0				!iOutput, create GIS results\n')

        if self.dlg.checkBox_Research.isChecked() == True:
            f.write('1				!iResearch\n')
        else:
            f.write('0				!iResearch\n')

        if self.dlg.checkBox_PROB_uncond_stable.isChecked() == True:
            f.write('1				!iPROB_uncond_stable.asc\n')
        else:
            f.write('0				!iPROB_uncond_stable.asc\n')

        if self.dlg.checkBox_PROB_uncond_unst.isChecked() == True:
            f.write('1				!iPROB_uncond_unst.asc\n')
        else:
            f.write('0				!iPROB_uncond_unst.asc\n')

        if self.dlg.checkBox_Infiltration.isChecked() == True:
            f.write('1				!iInfiltration.asc\n')
        else:
            f.write('0				!iInfiltration.asc\n')

        if self.dlg.checkBox_Initial_h_z.isChecked() == True:
            f.write('1				!iInitial_h_z.asc\n')
        else:
            f.write('0				!iInitial_h_z.asc\n')

        if self.dlg.checkBox_PoF_initial_cond.isChecked() == True:
            f.write('1				!iPROB_failure_initial_cond.asc\n')
        else:
            f.write('0				!iPROB_failure_initial_cond.asc\n')

        if self.dlg.checkBox_PoF_final_cond.isChecked() == True:
            f.write('1				!iPROB_failure_final_cond.asc\n')
        else:
            f.write('0				!iPROB_failure_final_cond.asc\n')

        if self.dlg.checkBox_SF_initial_cond.isChecked() == True:
            f.write('1				!iSF_initial_cond.asc\n')
        else:
            f.write('0				!iSF_initial_cond.asc\n')

        if self.dlg.checkBox_SF_final_cond.isChecked() == True:
            f.write('1				!iSF_final_cond.asc\n')
        else:
            f.write('0				!iSF_final_cond.asc\n')

        if self.dlg.checkBox_Runoff.isChecked() == True:
                f.write('1				!iRunoff\n')
        else:
                f.write('0				!iRunoff\n')


        
        # Close the file
        f.close()

        
        #=========================
        # Copy model and libraries
        #=========================

        # Get plugin path
        path = os.path.dirname(__file__)
    
        # Copy exe file into results file
        exe_path = os.path.join(path, 'run', 'fslam.exe')
        copy(exe_path,self.dlg.lineEdit.text())
        
        #Copy library
        exe_path = os.path.join(path, 'run', 'libiomp5md.dll')
        copy(exe_path,self.dlg.lineEdit.text())   


        #==============================
        # Run model into results folder
        #==============================

        # Get current directory
        curret_dir = os.getcwd()
        
        # Change current directory
        os.chdir(self.dlg.lineEdit.text())
        
        # Run
        cmd_line = 'cmd /C "' + self.dlg.lineEdit.text() + '/fslam.exe"'
        os.system(cmd_line)

        # Recover directory
        os.chdir(curret_dir)
        
        # Close dialog
        self.dlg.close()

        # Delete extra rasters
        fslamexe_path = os.path.join(self.dlg.lineEdit.text(), 'fslam.exe')
        os.remove(fslamexe_path)
        inputdat_path = os.path.join(self.dlg.lineEdit.text(), 'input.dat')
        os.remove(inputdat_path)
        dll_path = os.path.join(self.dlg.lineEdit.text(), 'libiomp5md.dll')
        os.remove(dll_path)
        log_path = os.path.join(self.dlg.lineEdit.text(), 'Log.txt')
        os.remove(log_path)


        if self.dlg.checkBox_GIS_result.isChecked() == True:
            extra_path2 = os.path.join(self.dlg.lineEdit.text(), 'topo.asc')
            extra_path3 = os.path.join(self.dlg.lineEdit.text(), 'CN_averaged.asc')
            extra_path4 = os.path.join(self.dlg.lineEdit.text(), 'rain_ant_averaged.asc')
            extra_path5 = os.path.join(self.dlg.lineEdit.text(), 'rain_averaged.asc')
            os.remove(extra_path2)
            os.remove(extra_path3)
            os.remove(extra_path4)
            os.remove(extra_path5)
        
    def LaunchModel_(self):
        
        
        #subprocess.call(['C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe'])
        #my_env = os.environ.copy()
        #my_env["PATH"] = "C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res;" + my_env["PATH"]
        #out = subprocess.Popen(r'C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe', cwd=r'C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/', shell = True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        #os.system('C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe')
        # Get current directory
        curret_dir = os.getcwd()
        
        # Change current directory
        os.chdir(r'C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res')
        
        # Run
        os.system('cmd /C "C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe"') 
 
        # Recover directory
        os.chdir(curret_dir)
        
        # Close dialog
        self.dlg.close()
        
        #os.system('cmd /k "C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe"') 
        #out = subprocess.run('C:/Arcview/HURLIMANN_SMUCPHY/fslam_v0.99/run/res/fslam.exe', shell=True)
        #QgsMessageLog.logMessage(out.stderr, tag="Processing")  
        #QgsMessageLog.logMessage(out.stdout, tag="Processing")      